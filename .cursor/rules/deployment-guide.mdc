---
description:
globs:
alwaysApply: false
---
# 部署指南

## 部署环境

### 开发环境
- 本地开发服务器: `pnpm dev`
- 热重载和快速刷新支持
- 开发工具和调试功能启用

### 预览环境
- 构建预览: `pnpm preview`
- 生产环境配置但使用测试数据
- 用于功能验证和用户验收测试

### 生产环境
- 优化构建: `pnpm build`
- 性能优化和代码压缩
- 生产级别的错误处理和监控

## 构建配置

### Next.js构建优化
- 配置文件: [next.config.js](mdc:next.config.js)
- 静态资源优化和压缩
- 代码分割和懒加载
- 图片优化和WebP支持

### 环境变量管理
- 开发环境: `.env.local`
- 预览环境: `.env.preview`
- 生产环境: `.env.production`
- 环境变量验证: [src/env.js](mdc:src/env.js)

### 构建产物
- `.next/` 目录包含构建输出
- 静态资源在 `public/` 目录
- 服务端渲染和静态生成页面

## 部署平台

### Vercel部署
```bash
# 安装Vercel CLI
npm i -g vercel

# 部署到Vercel
vercel --prod
```

### Docker部署
```dockerfile
# Dockerfile示例
FROM node:22-alpine
WORKDIR /app
COPY package*.json ./
RUN npm ci --only=production
COPY . .
RUN npm run build
EXPOSE 3000
CMD ["npm", "start"]
```

### 传统服务器部署
```bash
# 构建应用
pnpm build

# 启动生产服务器
pnpm start
```

## 性能优化

### 构建时优化
- Tree shaking移除未使用代码
- 代码压缩和混淆
- CSS优化和内联关键样式
- 图片优化和格式转换

### 运行时优化
- 服务端渲染 (SSR)
- 静态站点生成 (SSG)
- 增量静态再生 (ISR)
- 边缘计算和CDN缓存

### 资源优化
- 字体优化和预加载
- 关键资源优先级
- 懒加载和代码分割
- 服务工作者缓存策略

## 监控和日志

### 性能监控
- Core Web Vitals指标
- 页面加载时间监控
- API响应时间追踪
- 错误率和可用性监控

### 错误追踪
- 客户端错误捕获
- 服务端错误日志
- 用户行为分析
- 崩溃报告和堆栈跟踪

### 日志管理
- 结构化日志格式
- 日志级别和过滤
- 日志聚合和搜索
- 告警和通知机制

## 安全配置

### HTTPS配置
- SSL/TLS证书配置
- HTTP重定向到HTTPS
- 安全头设置
- 内容安全策略 (CSP)

### 医疗数据安全
- 数据传输加密
- 访问控制和权限管理
- 审计日志和合规性
- 数据备份和恢复

### 安全头配置
```javascript
// next.config.js安全头示例
const securityHeaders = [
  {
    key: 'X-DNS-Prefetch-Control',
    value: 'on'
  },
  {
    key: 'Strict-Transport-Security',
    value: 'max-age=63072000; includeSubDomains; preload'
  },
  {
    key: 'X-Frame-Options',
    value: 'DENY'
  }
]
```

## 备份和恢复

### 代码备份
- Git版本控制和远程仓库
- 定期代码备份和归档
- 分支策略和发布管理
- 回滚计划和流程

### 数据备份
- 用户数据定期备份
- 配置文件和环境变量备份
- 数据库备份和恢复测试
- 灾难恢复计划

## CI/CD流程

### 自动化构建
- Git提交触发构建
- 代码质量检查和测试
- 自动化部署到不同环境
- 构建状态通知和报告

### 发布流程
- 功能分支开发
- 代码审查和合并
- 自动化测试验证
- 生产环境发布
